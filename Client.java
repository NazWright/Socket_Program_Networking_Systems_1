package homework1;

import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;

/**
 *
 * @author Naz Wright
 */

public class Client {
	private int correctGuess;
	private boolean isGuessed;
	private int numGuesses;
	private Socket socket;
	public Client(int maxVal, int numGuesses, String serverIp, int port){
		   try {
            //connect to the server
            // create stream and add to on specified host (string) and port (int)
            this.correctGuess = (int) (Math.random() * ( maxVal - 1 + 1 ) + 1);
            this.numGuesses = numGuesses;
            this.socket = new Socket(serverIp, port);
            DataInputStream fromServer = new DataInputStream(new BufferedInputStream(this.socket.getInputStream()));
            DataOutputStream toServer = new DataOutputStream(this.socket.getOutputStream());

            System.out.println("--------------- Sending maximum possible al  " + maxVal + " to server. ----------------\n\n");
            //send maximum possible value to the server
            toServer.writeInt(maxVal);
            System.out.println("--------------- Sending " + numGuesses + " guesses to server. -----------------\n\n");
            toServer.writeInt(numGuesses);
          	this.isGuessed = false;
            communicateToServer(fromServer, toServer);
        } catch (UnknownHostException u) {
            System.out.println(u);
        } catch (IOException ex) {
            System.out.println("IOException on Client: " + ex.getMessage());
        }
  


	}

	public static void main(String[] args) {
		try{
			new Client(Integer.parseInt(args[0]), Integer.parseInt(args[1]), args[2], Integer.parseInt(args[3]));
		}
		catch(NumberFormatException num){
			System.out.println("NumberFormatException on Client: " + num.getMessage());
		}
        
    }

   /**
     * Matches the integer guess by the server to the correct number
     * generated by the client.
	 * Sends corresponding integer to the OutputStream Server
	 * 0 if the guess was correct, 1 if the guess was too high, -1 if too low
	 * @param  guess The integer value guessed by communicating Server
	 * @param  toServer DataOutputStream Object which sends integers to client
	 * @return none.
     */

     public void sendResponseFlag(int guess, DataOutputStream toServer){
     	try{
     		if( guess == this.correctGuess){
        		toServer.writeInt(0);
        		this.isGuessed = true;
        	}
        	else if( guess < this.correctGuess ){
        		toServer.writeInt(-1);
        	}
        	else{
        		toServer.writeInt(1);
        	}
     	}
     	catch (IOException ex) {
            System.out.println("IOException on Client: " + ex.getMessage());
        }
    	
      }

   /**
	 * Establishes a two-way connection with Server. Communicates continously until
	 * client makes the correct guess or there are no more alloted guesses.
	 * @param  fromServer DataInputStream Object which recieves integers from Server
	 * @param  toServer DataOutputStream Object which sends integers to client
	 * @return none.
     */

    public void communicateToServer(DataInputStream fromServer, DataOutputStream toServer){
    	String result = "";
    	int numberOfGuesses = this.numGuesses;
    	try{
    		do{

            	int guess = fromServer.readInt();
            	System.out.println("The servers guess was " + guess);
            	sendResponseFlag(guess, toServer);

            	if(this.isGuessed){
            		result = "Yes";
            	}
            	else{
            		result = "No";
            	}

            	if(numberOfGuesses == 1 || this.isGuessed ){
            			System.out.println(
            				"Magic Number: " + correctGuess + "\n" + "Guessed? : " + result
            				);
            			toServer.close();
            			fromServer.close();
            			this.socket.close();
            			System.exit(0);    		
            	}

            	numberOfGuesses--;
            }
            while( numberOfGuesses > 0 );

    	}
    	catch (IOException ex) {
            System.out.println("IOException on Client: " + ex.getMessage());
        }

       

    	
    }
}

